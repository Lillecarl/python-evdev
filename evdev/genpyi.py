#! /usr/bin/env python3
"""
Generate a Python extension module with the constants defined in linux/input.h.
"""

from __future__ import print_function
import os, sys, re


# -----------------------------------------------------------------------------
# The default header file locations to try.
headers = [
    "/usr/include/linux/input.h",
    "/usr/include/linux/input-event-codes.h",
    "/usr/include/linux/uinput.h",
]

if sys.argv[1:]:
    headers = sys.argv[1:]

uname = list(os.uname())
del uname[1]
uname = " ".join(uname)
print(f"# used_linux_headers: {headers}")


# -----------------------------------------------------------------------------
macro_regex = r"#define +((?:KEY|ABS|REL|SW|MSC|LED|BTN|REP|SND|ID|EV|BUS|SYN|FF|UI_FF|INPUT_PROP)_\w+)"
macro_regex = re.compile(macro_regex)

# -----------------------------------------------------------------------------
template = rf"""
# Automatically generated by evdev.genecodes
# Generated on {uname}
# Headers: {headers}

"""

def parse_header(header):
    lines = ""
    for line in open(header):
        macro = macro_regex.search(line)
        if macro:
            #lines += f"    {macro.group(1)}: int{os.linesep}"
            lines += f"{macro.group(1)}: int{os.linesep}"

    return lines


for header in headers:
    try:
        fh = open(header)
    except (IOError, OSError):
        print(f"Unable to read header file: {header}")
        continue
    template += f"{parse_header(header)}"

print(template)
